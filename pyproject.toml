[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "teams-meeting-to-line-group-bot"
version = "1.0.0"
description = "將 Microsoft Teams 會議通知自動轉發到 LINE 群組，並提供智能翻譯功能的 Azure Function 應用程式"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Teams-LINE Bot Team"},
]
keywords = ["teams", "line", "bot", "azure", "functions", "webhook", "translation", "openai"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Topic :: Communications :: Chat",
    "Topic :: Office/Business :: Scheduling",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Operating System :: OS Independent",
    "Framework :: Flask",
    "Environment :: Web Environment",
    "Topic :: Internet :: WWW/HTTP :: WSGI :: Application",
]
requires-python = ">=3.8"
dependencies = [
    "azure-functions>=1.18.0",
    "beautifulsoup4>=4.12.0",
    "line-bot-sdk>=3.5.0",
    "openai>=1.0.0",
    "flask>=2.0.0",
    "python-dotenv>=1.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=22.0.0",
    "flake8>=5.0.0",
    "isort>=5.0.0",
    "bandit>=1.7.0",
    "safety>=2.0.0",
    "pre-commit>=2.15.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "python-dotenv>=1.0.0",
]

[project.urls]
"Homepage" = "https://github.com/sunick2009/teams-meeting-to-line-group-bot"
"Bug Reports" = "https://github.com/sunick2009/teams-meeting-to-line-group-bot/issues"
"Source" = "https://github.com/sunick2009/teams-meeting-to-line-group-bot"
"Documentation" = "https://github.com/sunick2009/teams-meeting-to-line-group-bot/tree/main/docs"

[project.scripts]
teams-line-bot = "function_app:main"

[tool.setuptools.packages.find]
include = ["*.py"]
exclude = ["tests*", "scripts*", "docs*"]

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["function_app", "app_unified", "reply_token_manager", "webhook_logger"]

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    ".venv",
    "build",
    "dist",
    "*.egg-info",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--strict-markers",
    "--strict-config",
    "--cov=.",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = ["."]
omit = [
    "tests/*",
    "scripts/*",
    "setup.py",
    ".venv/*",
    "*/site-packages/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "scripts"]
skips = ["B101", "B601"]
